{"version":3,"sources":["weather.js"],"names":["API_KEY","WEATHER_API_KEY","BASE_URL","FORECAST_URL","CONDITIONS_URL","ASTRONOMY_URL","weatherService","forecast","coords","onSuccess","url","lat","lng","xhr","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","res","JSON","parse","responseText","fc","send","conditions","formatTime","hour","min","h","m","sunset","sunSetting","subscribe","method","timer","cb","call","console","error","setInterval"],"mappings":"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","file":"weather.js","sourcesContent":["import { CONSTANTS } from 'constants';\nimport { Forecast } from 'Forecast';\nimport { WeatherConditions } from 'WeatherConditions';\nimport { SunSetting } from 'SunSetting';\n\nconst API_KEY = CONSTANTS.WEATHER_API_KEY;\nconst BASE_URL = `//api.wunderground.com/api/${API_KEY}/`;\nconst FORECAST_URL = `${BASE_URL}hourly/q/`;\nconst CONDITIONS_URL = `${BASE_URL}conditions/q/`;\nconst ASTRONOMY_URL = `${BASE_URL}astronomy/q/`;\n\nexport const weatherService = (() => {\n    const forecast = (coords, onSuccess) => {\n        let url = `${FORECAST_URL}${coords.lat},${coords.lng}.json`;\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = () => {\n            if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n                let res = JSON.parse(xhr.responseText)['hourly_forecast'];\n                let fc = new Forecast(res, 6);\n                onSuccess(fc);\n            }\n        };\n        xhr.send();\n    }\n\n    const conditions = (coords, onSuccess) => {\n        let url = `${CONDITIONS_URL}${coords.lat},${coords.lng}.json`;\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = () => {\n            if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n                let res = JSON.parse(xhr.responseText)['current_observation'];\n                let conditions = new WeatherConditions(res);\n                onSuccess(conditions);\n            }\n        };\n        xhr.send();\n    }\n\n    const formatTime = (hour, min) => {\n        hour = hour > 12 ? hour - 12 : hour;\n        let h = hour < 10 ? `0${hour}` : `${hour}`;\n        let m = min < 10 ? `0${min}` : `${min}`;\n        return `${h}:${min}`;\n    }\n\n    const sunset = (coords, onSuccess) => {\n        let url = `${ASTRONOMY_URL}${coords.lat},${coords.lng}.json`;\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = () => {\n            if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n                let res = JSON.parse(xhr.responseText)['moon_phase'];\n                let sunSetting = new SunSetting(res);\n                onSuccess(sunSetting);\n            }\n        };\n        xhr.send();\n    }\n\n    const subscribe = (method, timer, coords, cb) => {\n        if(!weatherService[method] || !weatherService[method].call) {\n            return console.error('No weatherService method named' + method);\n        }\n\n        weatherService[method](coords, cb);\n        setInterval(() => {\n            weatherService[method](coords, cb);\n        }, timer)\n    }\n\n    return { forecast, conditions, subscribe, sunset }\n\n})();\n\n\n\n\n"]}